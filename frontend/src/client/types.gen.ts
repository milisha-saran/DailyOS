// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ChoreCreate = {
    name: string;
    frequency: ChoreFrequency;
    estimated_time_minutes: number;
    is_active?: boolean;
};

export type ChoreFrequency = 'daily' | 'weekly' | 'monthly';

export type ChoreLogCreate = {
    date?: string;
    actual_time_minutes: number;
    chore_id: string;
};

export type ChoreLogPublic = {
    date?: string;
    actual_time_minutes: number;
    id: string;
    chore_id: string;
    created_at: string;
};

export type ChoreLogsPublic = {
    data: Array<ChoreLogPublic>;
    count: number;
};

export type ChoreLogUpdate = {
    date?: string;
    actual_time_minutes?: (number | null);
};

export type ChorePublic = {
    name: string;
    frequency: ChoreFrequency;
    estimated_time_minutes: number;
    is_active?: boolean;
    id: string;
    created_at: string;
};

export type ChoresPublic = {
    data: Array<ChorePublic>;
    count: number;
};

export type ChoreUpdate = {
    name?: (string | null);
    frequency?: (ChoreFrequency | null);
    estimated_time_minutes?: (number | null);
    is_active?: (boolean | null);
};

export type GoalCreate = {
    name: string;
    description?: (string | null);
    deadline?: (string | null);
    daily_time_allocated_minutes?: (number | null);
    weekly_time_allocated_minutes?: (number | null);
    project_id: string;
};

export type GoalPublic = {
    name: string;
    description?: (string | null);
    deadline?: (string | null);
    daily_time_allocated_minutes?: (number | null);
    weekly_time_allocated_minutes?: (number | null);
    id: string;
    project_id: string;
    created_at: string;
};

export type GoalsPublic = {
    data: Array<GoalPublic>;
    count: number;
};

export type GoalUpdate = {
    name?: (string | null);
    description?: (string | null);
    deadline?: (string | null);
    daily_time_allocated_minutes?: (number | null);
    weekly_time_allocated_minutes?: (number | null);
    project_id?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type ProjectCreate = {
    name: string;
    color?: string;
    daily_time_allocated_minutes: number;
    weekly_time_allocated_minutes: number;
};

export type ProjectPublic = {
    name: string;
    color?: string;
    daily_time_allocated_minutes: number;
    weekly_time_allocated_minutes: number;
    id: string;
    created_at: string;
};

export type ProjectsPublic = {
    data: Array<ProjectPublic>;
    count: number;
};

export type ProjectUpdate = {
    name?: (string | null);
    color?: (string | null);
    daily_time_allocated_minutes?: (number | null);
    weekly_time_allocated_minutes?: (number | null);
};

export type TaskCreate = {
    name: string;
    description?: (string | null);
    status?: TaskStatus;
    estimated_time_minutes?: (number | null);
    actual_time_minutes?: number;
    date?: string;
    goal_id: string;
};

export type TaskPublic = {
    name: string;
    description?: (string | null);
    status?: TaskStatus;
    estimated_time_minutes?: (number | null);
    actual_time_minutes?: number;
    date?: string;
    id: string;
    goal_id: string;
    created_at: string;
};

export type TasksPublic = {
    data: Array<TaskPublic>;
    count: number;
};

export type TaskStatus = 'planned' | 'done';

export type TaskUpdate = {
    name?: (string | null);
    description?: (string | null);
    status?: (TaskStatus | null);
    estimated_time_minutes?: (number | null);
    actual_time_minutes?: (number | null);
    date?: string;
    goal_id?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ChoreLogsReadChoreLogsData = {
    choreId?: (string | null);
    dateFrom?: (string | null);
    dateTo?: (string | null);
    limit?: number;
    skip?: number;
};

export type ChoreLogsReadChoreLogsResponse = (ChoreLogsPublic);

export type ChoreLogsCreateChoreLogData = {
    requestBody: ChoreLogCreate;
};

export type ChoreLogsCreateChoreLogResponse = (ChoreLogPublic);

export type ChoreLogsReadChoreLogData = {
    id: string;
};

export type ChoreLogsReadChoreLogResponse = (ChoreLogPublic);

export type ChoreLogsUpdateChoreLogData = {
    id: string;
    requestBody: ChoreLogUpdate;
};

export type ChoreLogsUpdateChoreLogResponse = (ChoreLogPublic);

export type ChoreLogsDeleteChoreLogData = {
    id: string;
};

export type ChoreLogsDeleteChoreLogResponse = (Message);

export type ChoresReadChoresData = {
    isActive?: (boolean | null);
    limit?: number;
    skip?: number;
};

export type ChoresReadChoresResponse = (ChoresPublic);

export type ChoresCreateChoreData = {
    requestBody: ChoreCreate;
};

export type ChoresCreateChoreResponse = (ChorePublic);

export type ChoresReadChoreData = {
    id: string;
};

export type ChoresReadChoreResponse = (ChorePublic);

export type ChoresUpdateChoreData = {
    id: string;
    requestBody: ChoreUpdate;
};

export type ChoresUpdateChoreResponse = (ChorePublic);

export type ChoresDeleteChoreData = {
    id: string;
};

export type ChoresDeleteChoreResponse = (Message);

export type ChoresToggleChoreActiveData = {
    id: string;
};

export type ChoresToggleChoreActiveResponse = (ChorePublic);

export type DashboardGetDashboardSummaryResponse = (unknown);

export type DashboardGetTimeByProjectData = {
    days?: number;
};

export type DashboardGetTimeByProjectResponse = (unknown);

export type GoalsReadGoalsData = {
    limit?: number;
    projectId?: (string | null);
    skip?: number;
};

export type GoalsReadGoalsResponse = (GoalsPublic);

export type GoalsCreateGoalData = {
    requestBody: GoalCreate;
};

export type GoalsCreateGoalResponse = (GoalPublic);

export type GoalsReadGoalData = {
    id: string;
};

export type GoalsReadGoalResponse = (GoalPublic);

export type GoalsUpdateGoalData = {
    id: string;
    requestBody: GoalUpdate;
};

export type GoalsUpdateGoalResponse = (GoalPublic);

export type GoalsDeleteGoalData = {
    id: string;
};

export type GoalsDeleteGoalResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type ProjectsReadProjectsData = {
    limit?: number;
    skip?: number;
};

export type ProjectsReadProjectsResponse = (ProjectsPublic);

export type ProjectsCreateProjectData = {
    requestBody: ProjectCreate;
};

export type ProjectsCreateProjectResponse = (ProjectPublic);

export type ProjectsReadProjectData = {
    id: string;
};

export type ProjectsReadProjectResponse = (ProjectPublic);

export type ProjectsUpdateProjectData = {
    id: string;
    requestBody: ProjectUpdate;
};

export type ProjectsUpdateProjectResponse = (ProjectPublic);

export type ProjectsDeleteProjectData = {
    id: string;
};

export type ProjectsDeleteProjectResponse = (Message);

export type TasksReadTasksData = {
    goalId?: (string | null);
    limit?: number;
    projectId?: (string | null);
    skip?: number;
};

export type TasksReadTasksResponse = (TasksPublic);

export type TasksCreateTaskData = {
    requestBody: TaskCreate;
};

export type TasksCreateTaskResponse = (TaskPublic);

export type TasksReadTaskData = {
    id: string;
};

export type TasksReadTaskResponse = (TaskPublic);

export type TasksUpdateTaskData = {
    id: string;
    requestBody: TaskUpdate;
};

export type TasksUpdateTaskResponse = (TaskPublic);

export type TasksDeleteTaskData = {
    id: string;
};

export type TasksDeleteTaskResponse = (Message);

export type TasksLogTimeToTaskData = {
    id: string;
    minutes: number;
};

export type TasksLogTimeToTaskResponse = (TaskPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);