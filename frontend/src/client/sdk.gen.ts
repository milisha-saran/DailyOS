// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ChoreLogsReadChoreLogsData, ChoreLogsReadChoreLogsResponse, ChoreLogsCreateChoreLogData, ChoreLogsCreateChoreLogResponse, ChoreLogsReadChoreLogData, ChoreLogsReadChoreLogResponse, ChoreLogsUpdateChoreLogData, ChoreLogsUpdateChoreLogResponse, ChoreLogsDeleteChoreLogData, ChoreLogsDeleteChoreLogResponse, ChoresReadChoresData, ChoresReadChoresResponse, ChoresCreateChoreData, ChoresCreateChoreResponse, ChoresReadChoreData, ChoresReadChoreResponse, ChoresUpdateChoreData, ChoresUpdateChoreResponse, ChoresDeleteChoreData, ChoresDeleteChoreResponse, ChoresToggleChoreActiveData, ChoresToggleChoreActiveResponse, DashboardGetDashboardSummaryResponse, DashboardGetTimeByProjectData, DashboardGetTimeByProjectResponse, GoalsReadGoalsData, GoalsReadGoalsResponse, GoalsCreateGoalData, GoalsCreateGoalResponse, GoalsReadGoalData, GoalsReadGoalResponse, GoalsUpdateGoalData, GoalsUpdateGoalResponse, GoalsDeleteGoalData, GoalsDeleteGoalResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, ProjectsReadProjectsData, ProjectsReadProjectsResponse, ProjectsCreateProjectData, ProjectsCreateProjectResponse, ProjectsReadProjectData, ProjectsReadProjectResponse, ProjectsUpdateProjectData, ProjectsUpdateProjectResponse, ProjectsDeleteProjectData, ProjectsDeleteProjectResponse, TasksReadTasksData, TasksReadTasksResponse, TasksCreateTaskData, TasksCreateTaskResponse, TasksReadTaskData, TasksReadTaskResponse, TasksUpdateTaskData, TasksUpdateTaskResponse, TasksDeleteTaskData, TasksDeleteTaskResponse, TasksLogTimeToTaskData, TasksLogTimeToTaskResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class ChoreLogsService {
    /**
     * Read Chore Logs
     * Retrieve chore logs for the current user, optionally filtered by chore and date range.
     * @param data The data for the request.
     * @param data.choreId
     * @param data.dateFrom
     * @param data.dateTo
     * @param data.skip
     * @param data.limit
     * @returns ChoreLogsPublic Successful Response
     * @throws ApiError
     */
    public static readChoreLogs(data: ChoreLogsReadChoreLogsData = {}): CancelablePromise<ChoreLogsReadChoreLogsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chore-logs/',
            query: {
                chore_id: data.choreId,
                date_from: data.dateFrom,
                date_to: data.dateTo,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Chore Log
     * Create new chore log.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ChoreLogPublic Successful Response
     * @throws ApiError
     */
    public static createChoreLog(data: ChoreLogsCreateChoreLogData): CancelablePromise<ChoreLogsCreateChoreLogResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chore-logs/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Chore Log
     * Get chore log by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ChoreLogPublic Successful Response
     * @throws ApiError
     */
    public static readChoreLog(data: ChoreLogsReadChoreLogData): CancelablePromise<ChoreLogsReadChoreLogResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chore-logs/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Chore Log
     * Update a chore log.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ChoreLogPublic Successful Response
     * @throws ApiError
     */
    public static updateChoreLog(data: ChoreLogsUpdateChoreLogData): CancelablePromise<ChoreLogsUpdateChoreLogResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/chore-logs/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Chore Log
     * Delete a chore log.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteChoreLog(data: ChoreLogsDeleteChoreLogData): CancelablePromise<ChoreLogsDeleteChoreLogResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/chore-logs/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ChoresService {
    /**
     * Read Chores
     * Retrieve chores for the current user, optionally filtered by active status.
     * @param data The data for the request.
     * @param data.isActive
     * @param data.skip
     * @param data.limit
     * @returns ChoresPublic Successful Response
     * @throws ApiError
     */
    public static readChores(data: ChoresReadChoresData = {}): CancelablePromise<ChoresReadChoresResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chores/',
            query: {
                is_active: data.isActive,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Chore
     * Create new chore.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ChorePublic Successful Response
     * @throws ApiError
     */
    public static createChore(data: ChoresCreateChoreData): CancelablePromise<ChoresCreateChoreResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/chores/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Chore
     * Get chore by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ChorePublic Successful Response
     * @throws ApiError
     */
    public static readChore(data: ChoresReadChoreData): CancelablePromise<ChoresReadChoreResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/chores/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Chore
     * Update a chore.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ChorePublic Successful Response
     * @throws ApiError
     */
    public static updateChore(data: ChoresUpdateChoreData): CancelablePromise<ChoresUpdateChoreResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/chores/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Chore
     * Delete a chore.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteChore(data: ChoresDeleteChoreData): CancelablePromise<ChoresDeleteChoreResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/chores/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Toggle Chore Active
     * Toggle the active status of a chore.
     * @param data The data for the request.
     * @param data.id
     * @returns ChorePublic Successful Response
     * @throws ApiError
     */
    public static toggleChoreActive(data: ChoresToggleChoreActiveData): CancelablePromise<ChoresToggleChoreActiveResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/chores/{id}/toggle-active',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DashboardService {
    /**
     * Get Dashboard Summary
     * Get dashboard summary with key metrics for the current user.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDashboardSummary(): CancelablePromise<DashboardGetDashboardSummaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dashboard/summary'
        });
    }
    
    /**
     * Get Time By Project
     * Get time logged by project for the last N days.
     * @param data The data for the request.
     * @param data.days
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTimeByProject(data: DashboardGetTimeByProjectData = {}): CancelablePromise<DashboardGetTimeByProjectResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dashboard/time-by-project',
            query: {
                days: data.days
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class GoalsService {
    /**
     * Read Goals
     * Retrieve goals for the current user, optionally filtered by project.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.skip
     * @param data.limit
     * @returns GoalsPublic Successful Response
     * @throws ApiError
     */
    public static readGoals(data: GoalsReadGoalsData = {}): CancelablePromise<GoalsReadGoalsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/goals/',
            query: {
                project_id: data.projectId,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Goal
     * Create new goal.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns GoalPublic Successful Response
     * @throws ApiError
     */
    public static createGoal(data: GoalsCreateGoalData): CancelablePromise<GoalsCreateGoalResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/goals/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Goal
     * Get goal by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns GoalPublic Successful Response
     * @throws ApiError
     */
    public static readGoal(data: GoalsReadGoalData): CancelablePromise<GoalsReadGoalResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/goals/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Goal
     * Update a goal.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns GoalPublic Successful Response
     * @throws ApiError
     */
    public static updateGoal(data: GoalsUpdateGoalData): CancelablePromise<GoalsUpdateGoalResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/goals/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Goal
     * Delete a goal.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteGoal(data: GoalsDeleteGoalData): CancelablePromise<GoalsDeleteGoalResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/goals/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ProjectsService {
    /**
     * Read Projects
     * Retrieve projects for the current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ProjectsPublic Successful Response
     * @throws ApiError
     */
    public static readProjects(data: ProjectsReadProjectsData = {}): CancelablePromise<ProjectsReadProjectsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/projects/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Project
     * Create new project.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProjectPublic Successful Response
     * @throws ApiError
     */
    public static createProject(data: ProjectsCreateProjectData): CancelablePromise<ProjectsCreateProjectResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/projects/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Project
     * Get project by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ProjectPublic Successful Response
     * @throws ApiError
     */
    public static readProject(data: ProjectsReadProjectData): CancelablePromise<ProjectsReadProjectResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/projects/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Project
     * Update a project.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ProjectPublic Successful Response
     * @throws ApiError
     */
    public static updateProject(data: ProjectsUpdateProjectData): CancelablePromise<ProjectsUpdateProjectResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/projects/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Project
     * Delete a project.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteProject(data: ProjectsDeleteProjectData): CancelablePromise<ProjectsDeleteProjectResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/projects/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TasksService {
    /**
     * Read Tasks
     * Retrieve tasks for the current user, optionally filtered by goal or project.
     * @param data The data for the request.
     * @param data.goalId
     * @param data.projectId
     * @param data.skip
     * @param data.limit
     * @returns TasksPublic Successful Response
     * @throws ApiError
     */
    public static readTasks(data: TasksReadTasksData = {}): CancelablePromise<TasksReadTasksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/',
            query: {
                goal_id: data.goalId,
                project_id: data.projectId,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Task
     * Create new task.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static createTask(data: TasksCreateTaskData): CancelablePromise<TasksCreateTaskResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task
     * Get task by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static readTask(data: TasksReadTaskData): CancelablePromise<TasksReadTaskResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Task
     * Update a task.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static updateTask(data: TasksUpdateTaskData): CancelablePromise<TasksUpdateTaskResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/tasks/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task
     * Delete a task.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTask(data: TasksDeleteTaskData): CancelablePromise<TasksDeleteTaskResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/tasks/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Log Time To Task
     * Log time to a task (adds to existing actual_time_minutes).
     * @param data The data for the request.
     * @param data.id
     * @param data.minutes
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static logTimeToTask(data: TasksLogTimeToTaskData): CancelablePromise<TasksLogTimeToTaskResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/tasks/{id}/log-time',
            path: {
                id: data.id
            },
            query: {
                minutes: data.minutes
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}